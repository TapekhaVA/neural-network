from numpy import exp, array, random, dot

class NeuralNetwork():
    def __init__(self):
        # Заполняем генератор случайных чисел, чтобы он генерировал то же число
        # каждый раз при запуске The derivative of the Sigmoid function.
        random.seed(1)

        # Мы моделируем один нейрон входными с тремя входными подключениями и 1 выходным 
        # Мы назначаем случайные веса со значениями в диапазоне от -1 до 1
        # и средним значением 0
        self.synaptic_weights = 2 * random.random((3, 1)) - 1

    # Функция сигмоиды, которая описывает s-образную кривую
    def __sigmoid(self, x):
        return 1 / (1 + exp(-x))
    # производная
    def __sigmoid_derivative(self, x):
        return x * (1 - x)

    # Мы обучаем нейронную сеть методом проб и ошибок
    # Регулируем синаптические веса каждый раз
    def train(self, training_set_inputs, training_set_outputs, number_of_training_iterations):
        for iteration in range(number_of_training_iterations):
            # Пропускаем обучающий набор через нашу нейронную сеть (отдельный нейрон)
            
            output = self.think(training_set_inputs)

            # Рассчитаем ошибку (Разница между желаемым выходом
            # и прогнозируемым результатом)
            error = training_set_outputs - output

            # Умножаем ошибку на вывод и на градиент
            # Менее уверенные веса корректируются больше.
            # входы, которые равны нулю, не вызывают изменений весов.
            adjustment = dot(training_set_inputs.T, error * self.__sigmoid_derivative(output))

            # Корректируем веса
            self.synaptic_weights += adjustment

    # нейросеть думает
    def think(self, inputs):
        # Передаем входные данные через нашу нейросеть(один нейрон)
        return self.__sigmoid(dot(inputs, self.synaptic_weights))


if __name__ == "__main__":

    #Инициализируем нейронную сеть с одним нейроном
    neural_network = NeuralNetwork()

    print("Случайные начальные веса: ")
    print(neural_network.synaptic_weights)

    # Обучающий набор
    # У нас есть 4 примера, каждый из них состоит из 3 входных значений
    # и одно выходное значение
    training_set_inputs = array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]])
    training_set_outputs = array([[0, 1, 1, 0]]).T

    # Тренируем нейросеть, используя обучающий набор
    # Делаем это 10000 раз и каждый раз делаем небольшие корректировки
    neural_network.train(training_set_inputs, training_set_outputs, 10000)

    print ("Новые веса после тренировки: ")
    print (neural_network.synaptic_weights)

    # Проверим нейросеть с новыми числами
    print( "Рассмотрим новую ситуацию [1, 0, 0] -> ?: ")
    print( neural_network.think(array([1, 0, 0])))
